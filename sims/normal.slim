initialize() {
	if (!exists("N")) defineConstant("N", 1e4);
	if (!exists("XOPT")) defineConstant("XOPT", 1.0);
	defineConstant("DT", 0.01);
	defineConstant("ALPHA", 0.2);
	defineConstant("SD", 0.2);
	if (!exists("BURNIN")) defineConstant("BURNIN", 10000);
	if (!exists("NUMGENS")) defineConstant("NUMGENS", 2000);
	if (!exists("MUTRATE")) defineConstant("MUTRATE", 1e-9);
    defineConstant("OUTFILE", "sim_normal_" + getSeed() + ".repro.tsv");
    defineConstant("POPOUTFILE", "sim_normal_" + getSeed() + ".pop.tsv");
    defineConstant("FIXOUTFILE", "sim_normal_" + getSeed() + ".fix.tsv");
	defineConstant("params", Dictionary("N", N, "DT", DT, "SD", SD, "type", "normal"));
	initializeSLiMModelType("nonWF");
	initializeTreeSeq();
	initializeMutationRate(MUTRATE);
	initializeMutationType("m1", 0.5, "n", 0.0, SD);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 1e8-1);
	initializeRecombinationRate(1e-8);
    catn("N: " + N
        + " DT: " + DT
        + " ALPHA: " + ALPHA
        + " SD: " + SD
        + " XOPT: " + XOPT
        + " BURNIN: " + BURNIN
        + " MUTRATE: " + MUTRATE
        + " NUMGENS: " + NUMGENS
        + " OUTFILE: " + OUTFILE);
}

1 first() {
	sim.addSubpop("p1", N);
	inds = p1.individuals;
	inds.tagF = inds.sumOfMutationsOfType(m1);
	writeFile(OUTFILE, params.serialize(format='json'));
	writeFile(FIXOUTFILE, "time" + "\t" + "num_fixations" + "\t" + "num_mutations");
	community.rescheduleScriptBlock(s98, start=asInteger(BURNIN/DT), end=asInteger((BURNIN+NUMGENS)/DT));
	community.rescheduleScriptBlock(s99, ticks=asInteger((BURNIN+NUMGENS)/DT));
}

mutationEffect(m1) {
	return 1.0;
}

first() {
	n = p1.individualCount;
	inds = p1.individuals;
	x = inds.tagF - XOPT;
	z = exp(ALPHA * x^2);
	dead = (runif(n) < 1 - exp(-DT * z));
	k = sum(dead);
	inds[dead].fitnessScaling = 0.0;
	parents = sample(inds, size=k, replace=F);
	inds.tag = 0;
	parents.tag = 1;
}

reproduction() {
	if (individual.tag > 0) {
		mate = p1.sampleIndividuals(1);
		child = p1.addCrossed(individual, mate);
		child.tagF = child.sumOfMutationsOfType(m1);
		child.setValue("ma", individual.tagF);
		child.setValue("pa", mate.tagF);
	}
}

s98 10000: early() {
	if (community.tick - asInteger(floor(community.tick * DT) / DT) == 0) {
		inds = p1.individuals;
		children = inds[inds.age == 0];
		if (length(children) > 0) {
			outline = paste(c(children.tagF, children.getValue("ma"), children.getValue("pa")), sep="\t");
			writeFile(OUTFILE, community.tick * DT + "\t" + outline, append=T);
		}
		writeFile(FIXOUTFILE, community.tick * DT + "\t" + sum(sim.mutationFrequencies(NULL) == 1.0) + "\t" + length(sim.mutations), append=T);
	}
}

s99 12000 late() {
	writeFile(POPOUTFILE, "trait" + "\t" + "age");
	for (ind in p1.individuals) {
		writeFile(POPOUTFILE, ind.tagF + "\t" + ind.age, append=T);
	}
    catn("Done! In tick " + community.tick + ", time " + community.tick/DT);
	sim.simulationFinished();
}
